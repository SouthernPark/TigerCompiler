structure A = Absyn

%%
%term
    EOF
  | ID of string
  | INT of int | STRING of string
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK
  | LBRACE | RBRACE | DOT
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF
  | BREAK | NIL
  | FUNCTION | VAR | TYPE

%nonterm  exp of A.exp | program of A.exp | decs of A.dec list | dec of A.dec | ty of A.ty | tydec of A.dec | vardec of A.dec | tyfields of A.field list | tyfieldsTail of A.field list | fundec of A.dec | lvalue of A.var

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program	: exp								(exp)


exp: NIL								(A.NilExp)


lvalue: ID								(A.SimpleVar(Symbol.symbol(ID), IDleft))
      | lvalue DOT ID							(A.FieldVar(lvalue, Symbol.symbol(ID), lvalueleft))
      | lvalue LBRACK exp RBRACK					(A.SubscriptVar(lvalue, exp, lvalueleft))



decs: dec decs								(dec :: decs)
    | 	  								(nil)

dec: tydec                                                            	(tydec)
   | vardec                                                           	(vardec)
   | fundec								(fundec)


tydec: TYPE ID EQ ty							(A.TypeDec({name=Symbol.symbol(ID), ty=ty, pos=TYPEleft}::nil))

vardec: VAR ID ASSIGN exp						(A.VarDec({name=Symbol.symbol(ID), escape=ref true, typ=NONE, init=exp, pos=VARleft}))
      | VAR ID COLON ID ASSIGN exp					(A.VarDec({name=Symbol.symbol(ID1), escape=ref true, typ=SOME(Symbol.symbol(ID2), IDleft), init=exp, pos=VARleft}))

ty: ID	       	     	       						(A.NameTy(Symbol.symbol(ID), IDleft))
  | LBRACE tyfields RBRACE						(A.RecordTy(tyfields))
  | ARRAY OF ID	    							(A.ArrayTy(Symbol.symbol(ID), IDleft))

tyfields: ID COLON ID tyfieldsTail					({name=Symbol.symbol(ID1), escape=ref true, typ=Symbol.symbol(ID2), pos=ID1left}::tyfieldsTail)

tyfieldsTail: COMMA tyfields						(tyfields)
	    | 	    							(nil)

fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp			(A.FunctionDec({name=Symbol.symbol(ID), params=tyfields, result=NONE, body=exp, pos=FUNCTIONleft}::nil))
       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp		(A.FunctionDec({name=Symbol.symbol(ID1), params=tyfields, result=SOME(Symbol.symbol(ID2), ID2left), body=exp, pos=FUNCTIONleft}::nil))


