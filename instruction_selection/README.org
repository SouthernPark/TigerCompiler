#+TITLE Semantic Analysis
#+DATE <2023-03-26 Sun>
#+TODO: TODO INPROCESS UNSURE DONE

Canonize + instruction selection

* grader read
+ MIPS doesn't have subi, we can achieve the same effect as a subtraction by using the /addi/ or we could move the const to a reg and use /sub/. Here, we choose the second solution.


* new file added

| name          | description                                         |
| canon.sml     | provided by the book, used to canonize our IR tree  |
| assem.sml     | provided by the book, abstract assembly instruction |
| flowgraph.sml | provided by the book, not know                      |
| graph.sig     | provided by the book, signature for graph structure |
| graph.sml     | provided by the book,                               |
| main.sml      | provided by the book, compile and emit assembly     |
| runtime.c     | provided by the bokk, library functions             |
| mipsgen.sml   | need to implement "Maximal Munch" algorithm         |


* MIPS

[[https://uweb.engr.arizona.edu/~ece369/Resources/spim/MIPSReference.pdf][mips instruction]]

Mips does not have a memory-to-memory move instruction. In MIPS, data transfer between memory locations must be done using a register as an intermediate.

MIPS /mult $s, $t/, This instruction multiplies the signed integers in registers $s and $t, and stores the 64-bit result in registers $HI and $LO.

MIPS doesn't have subi, we can achieve the same effect as a subtraction by using the /addi/ or we could move the const to a reg and use /sub/. Here, we choose the second solution.


+----------------+--------------+---------------------------+-------------+-----------+
| name           | effect       |trees                      | notes       |# of nodes |
+----------------+--------------+---------------------------+-------------+-----------+
| add $d, $s, $t | $d = $s + $t |  +                        |signed       | 1         |
|                |              | / \                       |arithmatics  |           |
|                |              |                           |             |           |
+----------------+--------------+---------------------------+-------------+-----------+
|sub $d, $s, $t  | $d = $s - $t |  -                        |signed       | 1         |
|                |              | / \                       |             |           |
|                |              |                           |             |           |
+----------------+--------------+---------------------------+-------------+-----------+
|mult $s, $t     |hi:lo = $s *  |  *                        |may need to  | 1         |
|                |$t            | / \                       |move value in|           |
|                |              |                           |low reg      |           |
+----------------+--------------+---------------------------+-------------+-----------+
|div $s, $t      |lo = $s / $t  |  /                        |may need to  | 1         |
|                |hi = $s % $t  | / \                       |mvoe value in|           |
|                |              |                           |low reg      |           |
+----------------+--------------+---------------------------+-------------+-----------+
|addi $t, $s, i  |$t = $s +     |                           |c means      | 1 or 2    |
|                |SE(i)         |   +     +     c           |cosnt, mips  |           |
|                |              |  / \   / \                |does not have|           |
|                |              | c         c               |subi, we use |           |
|                |              |                           |addi         |           |
+----------------+--------------+---------------------------+-------------+-----------+
|                |              |                           |             |           |
|                |              |                           |             |           |
|                |              |                           |             |           |
|                |              |                           |             |           |
+----------------+--------------+---------------------------+-------------+-----------+





* todo

** implement maximal munch in mipsgen.sml

** implement FindEscape
optional requirement in instruction selection phase

* Issue

** TODO arguments passing in Call exp
Currently, we set the escaping of all args as true. Therefore, all the args will not be stored in the regs but in the frame.

For the munchArgs described in page 204, which generate code to move args to correct position and returns a list of temps that are to be passed machine's call exp, what should we return if all the args are in the frame. (It also says, we need these for later liveness analysis)

** string in assembly
Below is an example of string in MIPS assembly:
#+BEGIN_SRC
.data
myString: .asciiz "Hello, world!"
#+END_SRC

.asciiz directive, which tells the assembler to allocate space for the string and add a null terminator at the end





